(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("EThingUI"));
	else if(typeof define === 'function' && define.amd)
		define(["EThingUI"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("EThingUI")) : factory(root["EThingUI"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(window, function(__WEBPACK_EXTERNAL_MODULE_ething_ui__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Main.vue?vue&type=script&lang=js&":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Main.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var ething_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ething-ui */ \"ething-ui\");\n/* harmony import */ var ething_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ething_ui__WEBPACK_IMPORTED_MODULE_0__);\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: ['resource'],\n  data: function data() {\n    return {};\n  },\n  computed: {\n    connected: function connected() {\n      return !!this.resource.attr('access_token');\n    }\n  },\n  methods: {\n    connect: function connect() {\n      window.location = this.$ething.toApiUrl('resources/' + this.resource.id() + '/spotify/login?redirect_uri=' + encodeURIComponent(window.location));\n    }\n  }\n});\n\n//# sourceURL=webpack:///./src/components/Main.vue?./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/SpotifyWidget.vue?vue&type=script&lang=js&":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/components/SpotifyWidget.vue?vue&type=script&lang=js& ***!
  \*************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var ething_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ething-ui */ \"ething-ui\");\n/* harmony import */ var ething_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ething_ui__WEBPACK_IMPORTED_MODULE_0__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nvar Spotify = __webpack_require__(/*! spotify-web-api-js */ \"./node_modules/spotify-web-api-js/src/spotify-web-api.js\");\n\nfunction pad(n, width, z) {\n  z = z || '0';\n  n = n + '';\n  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'WSpotify',\n  extends: ething_ui__WEBPACK_IMPORTED_MODULE_0___default.a.components.widgets.WResource,\n  components: {\n    WLayout: ething_ui__WEBPACK_IMPORTED_MODULE_0___default.a.components.widgets.WLayout\n  },\n  data: function data() {\n    return {\n      spotify: new Spotify(),\n      devices: [],\n      playlists: [],\n      selectedDeviceId: null,\n      selectedPlaylistId: null,\n      refreshing: false,\n      state: {\n        is_playing: false,\n        device: {},\n        item: {},\n        shuffle_state: false,\n        repeat_state: false\n      },\n      stateFetchTs: null,\n      p_currentReq: null,\n      p_timer: null,\n      p_cnt: 0,\n      time: null,\n      p_observer: null\n    };\n  },\n  computed: {\n    accessToken: function accessToken() {\n      return this.resource.attr('access_token');\n    },\n    playlistOptions: function playlistOptions() {\n      return this.playlists.map(function (item) {\n        return {\n          label: item.name,\n          value: item.id\n        };\n      });\n    },\n    deviceOptions: function deviceOptions() {\n      return this.devices.map(function (item) {\n        return {\n          label: item.name,\n          value: item.id // icon: item.type\n\n        };\n      });\n    },\n    selectedPlaylist: function selectedPlaylist() {\n      if (this.selectedPlaylistId) {\n        return this.getPlaylistById(this.selectedPlaylistId);\n      }\n    },\n    selectedDevice: function selectedDevice() {\n      if (this.selectedDeviceId) {\n        return this.getDeviceById(this.selectedDeviceId);\n      }\n    },\n    currentDevice: function currentDevice() {\n      return this.state.device || {};\n    },\n    currentItem: function currentItem() {\n      return this.state.item || {};\n    },\n    currentTrackEstimatedProgress: {\n      cache: false,\n      get: function get() {\n        if (!this.stateFetchTs) return 0;\n        var readProgress = this.state.progress_ms || 0;\n        var deltaT = this.state.is_playing ? Date.now() - this.stateFetchTs : 0;\n        return readProgress + deltaT;\n      }\n    },\n    currentTrackEstimatedProgressPercent: function currentTrackEstimatedProgressPercent() {\n      var progress = this.currentTrackEstimatedProgress;\n      var duration = this.currentItem.duration_ms;\n      return duration ? 100 * progress / duration : 0;\n    },\n    pollingActivated: function pollingActivated() {\n      return this.p_timer !== null;\n    }\n  },\n  watch: {\n    'accessToken': {\n      handler: function handler(val, oldVal) {\n        this.spotify.setAccessToken(val);\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    getDeviceById: function getDeviceById(id) {\n      for (var i in this.devices) {\n        var device = this.devices[i];\n\n        if (device.id === id) {\n          return device;\n        }\n      }\n    },\n    getPlaylistById: function getPlaylistById(id) {\n      for (var i in this.playlists) {\n        var playlist = this.playlists[i];\n\n        if (playlist.id === id) {\n          return playlist;\n        }\n      }\n    },\n    refresh: function refresh() {\n      var _this = this;\n\n      this.refreshing = true;\n      var p0 = this.spotify.getMyDevices(function (err, data) {\n        if (err) console.error(err);else {\n          console.log('Devices:', data);\n          _this.devices = data.devices; // get active device\n\n          for (var i in _this.devices) {\n            if (_this.devices[i].is_active) {\n              if (!_this.selectedDeviceId) _this.selectedDeviceId = _this.state.device.id;\n              break;\n            }\n          }\n        }\n      });\n      var p1 = this.spotify.getUserPlaylists(function (err, data) {\n        if (err) console.error(err);else {\n          console.log('Playlists:', data);\n          _this.playlists = data.items;\n        }\n      });\n      Promise.all([p0, p1]).finally(function () {\n        _this.refreshing = false;\n      });\n    },\n    prev: function prev() {\n      var _this2 = this;\n\n      this.spotify.skipToPrevious(function (err, data) {\n        if (err) console.error(err);else {\n          _this2.current(true);\n        }\n      });\n    },\n    playpause: function playpause() {\n      var _this3 = this;\n\n      if (this.state.is_playing) {\n        this.spotify.pause(function (err, data) {\n          if (err) console.error(err);else {\n            _this3.state.is_playing = false;\n\n            _this3.current(true);\n          }\n        });\n      } else {\n        this.spotify.play(function (err, data) {\n          if (err) console.error(err);else {\n            _this3.state.is_playing = true;\n\n            _this3.current(true);\n          }\n        });\n      }\n    },\n    next: function next() {\n      var _this4 = this;\n\n      this.spotify.skipToNext(function (err, data) {\n        if (err) console.error(err);else {\n          _this4.current(true);\n        }\n      });\n    },\n    playSelected: function playSelected() {\n      var _this5 = this;\n\n      var options = {};\n\n      if (this.selectedPlaylist) {\n        options.context_uri = this.selectedPlaylist.uri;\n      }\n\n      if (this.selectedDevice) {\n        options.device_id = this.selectedDevice.id;\n      }\n\n      if (Object.keys(options).length) {\n        this.spotify.play(options, function (err, data) {\n          if (err) console.error(err);else {\n            _this5.state.is_playing = true;\n\n            _this5.current(true);\n          }\n        });\n      }\n    },\n    _current: function _current() {\n      var _this6 = this;\n\n      // abort previous request, if any\n      if (this.p_currentReq) {\n        this.p_currentReq.abort();\n      }\n\n      this.p_currentReq = this.spotify.getMyCurrentPlaybackState(function (err, data) {\n        // clean the promise so it doesn't call abort\n        _this6.p_currentReq = null;\n        if (err) console.error(err);else {\n          _this6.stateFetchTs = Date.now();\n          Object.assign(_this6.state, data);\n        }\n      });\n      return this.p_currentReq;\n    },\n    current: function current(delay) {\n      var _this7 = this;\n\n      if (delay) {\n        setTimeout(function () {\n          _this7._current();\n        }, 500);\n      } else {\n        this._current();\n      }\n    },\n    setShuffle: function setShuffle(state) {\n      var _this8 = this;\n\n      state = !!state;\n      this.spotify.setShuffle(state, function (err, data) {\n        if (err) console.error(err);else {\n          _this8.$set(_this8.state, 'shuffle_state', state);\n\n          _this8.current(true);\n        }\n      });\n    },\n    setRepeat: function setRepeat(state) {\n      var _this9 = this;\n\n      this.spotify.setRepeat(state, function (err, data) {\n        if (err) console.error(err);else {\n          _this9.$set(_this9.state, 'repeat_state', state);\n\n          _this9.current(true);\n        }\n      });\n    },\n    setVolume: function setVolume(volume) {\n      var _this10 = this;\n\n      var current_volume = 0;\n      current_volume = this.currentDevice.volume_percent || 0;\n\n      if (volume == 'mute') {\n        volume = 0;\n      } else if (volume == 'up') {\n        volume = current_volume + 5;\n      } else if (volume == 'down') {\n        volume = current_volume - 5;\n      }\n\n      if (volume < 0) volume = 0;\n      if (volume > 100) volume = 100;\n      this.spotify.setVolume(volume, function (err, data) {\n        if (err) console.error(err);else {\n          if (_this10.state.device) {\n            _this10.$set(_this10.state.device, 'volume_percent', volume);\n          }\n\n          _this10.current(true);\n        }\n      });\n    },\n    currentTrackTimeToString: function currentTrackTimeToString() {\n      var progress = this.currentTrackEstimatedProgress;\n      var duration = this.currentItem.duration_ms;\n\n      if (duration) {\n        var _toString = function _toString(msec) {\n          var sec = parseInt(msec / 1000);\n          var min = Math.floor(sec / 60);\n          sec -= min * 60;\n          return pad(min, 2) + \":\" + pad(sec, 2);\n        };\n\n        if (progress > duration) progress = duration;\n        return _toString(progress) + \"/\" + _toString(duration);\n      }\n    },\n    _installPolling: function _installPolling() {\n      if (this.p_timer === null) {\n        this.current();\n        this.p_cnt = 0;\n        this.p_timer = setInterval(this._pollFunc, 1000);\n      }\n    },\n    _uninstallPolling: function _uninstallPolling() {\n      if (this.p_timer !== null) {\n        clearInterval(this.p_timer);\n        this.p_timer = null;\n      }\n    },\n    _pollFunc: function _pollFunc() {\n      this.p_cnt = (this.p_cnt || 0) + 1;\n\n      if (this.p_cnt % 5 == 0) {\n        this.current();\n      }\n\n      if (this.currentTrackEstimatedProgressPercent >= 100) {\n        this.current();\n      }\n\n      this.time = this.currentTrackTimeToString();\n    }\n  },\n  mounted: function mounted() {\n    var _this11 = this;\n\n    this._installPolling();\n\n    this.refresh();\n    this.p_observer = new ething_ui__WEBPACK_IMPORTED_MODULE_0___default.a.utils.VisibilityObserver(function (visible, reason) {\n      if (visible) {\n        _this11._installPolling();\n      } else {\n        _this11._uninstallPolling();\n      }\n    }, this.$el, {\n      'waitHidden': 10000\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.p_observer) {\n      this.p_observer.destroy();\n    }\n\n    this._uninstallPolling();\n  }\n});\n\n//# sourceURL=webpack:///./src/components/SpotifyWidget.vue?./node_modules/babel-loader/lib??ref--1!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/spotify-web-api-js/src/spotify-web-api.js":
/*!****************************************************************!*\
  !*** ./node_modules/spotify-web-api-js/src/spotify-web-api.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* global module */\n\n\n/**\n * Class representing the API\n */\nvar SpotifyWebApi = (function() {\n  var _baseUri = 'https://api.spotify.com/v1';\n  var _accessToken = null;\n  var _promiseImplementation = null;\n\n  var WrapPromiseWithAbort = function(promise, onAbort) {\n    promise.abort = onAbort;\n    return promise;\n  };\n\n  var _promiseProvider = function(promiseFunction, onAbort) {\n    var returnedPromise;\n    if (_promiseImplementation !== null) {\n      var deferred = _promiseImplementation.defer();\n      promiseFunction(\n        function(resolvedResult) {\n          deferred.resolve(resolvedResult);\n        },\n        function(rejectedResult) {\n          deferred.reject(rejectedResult);\n        }\n      );\n      returnedPromise = deferred.promise;\n    } else {\n      if (window.Promise) {\n        returnedPromise = new window.Promise(promiseFunction);\n      }\n    }\n\n    if (returnedPromise) {\n      return new WrapPromiseWithAbort(returnedPromise, onAbort);\n    } else {\n      return null;\n    }\n  };\n\n  var _extend = function() {\n    var args = Array.prototype.slice.call(arguments);\n    var target = args[0];\n    var objects = args.slice(1);\n    target = target || {};\n    objects.forEach(function(object) {\n      for (var j in object) {\n        if (object.hasOwnProperty(j)) {\n          target[j] = object[j];\n        }\n      }\n    });\n    return target;\n  };\n\n  var _buildUrl = function(url, parameters) {\n    var qs = '';\n    for (var key in parameters) {\n      if (parameters.hasOwnProperty(key)) {\n        var value = parameters[key];\n        qs += encodeURIComponent(key) + '=' + encodeURIComponent(value) + '&';\n      }\n    }\n    if (qs.length > 0) {\n      // chop off last '&'\n      qs = qs.substring(0, qs.length - 1);\n      url = url + '?' + qs;\n    }\n    return url;\n  };\n\n  var _performRequest = function(requestData, callback) {\n    var req = new XMLHttpRequest();\n\n    var promiseFunction = function(resolve, reject) {\n      function success(data) {\n        if (resolve) {\n          resolve(data);\n        }\n        if (callback) {\n          callback(null, data);\n        }\n      }\n\n      function failure() {\n        if (reject) {\n          reject(req);\n        }\n        if (callback) {\n          callback(req, null);\n        }\n      }\n\n      var type = requestData.type || 'GET';\n      req.open(type, _buildUrl(requestData.url, requestData.params));\n      if (_accessToken) {\n        req.setRequestHeader('Authorization', 'Bearer ' + _accessToken);\n      }\n      if (requestData.contentType) {\n        req.setRequestHeader('Content-Type', requestData.contentType)\n      }\n\n      req.onreadystatechange = function() {\n        if (req.readyState === 4) {\n          var data = null;\n          try {\n            data = req.responseText ? JSON.parse(req.responseText) : '';\n          } catch (e) {\n            console.error(e);\n          }\n\n          if (req.status >= 200 && req.status < 300) {\n            success(data);\n          } else {\n            failure();\n          }\n        }\n      };\n\n      if (type === 'GET') {\n        req.send(null);\n      } else {\n        var postData = null\n        if (requestData.postData) {\n          postData = requestData.contentType === 'image/jpeg' ? requestData.postData : JSON.stringify(requestData.postData)\n        }\n        req.send(postData);\n      }\n    };\n\n    if (callback) {\n      promiseFunction();\n      return null;\n    } else {\n      return _promiseProvider(promiseFunction, function() {\n        req.abort();\n      });\n    }\n  };\n\n  var _checkParamsAndPerformRequest = function(requestData, options, callback, optionsAlwaysExtendParams) {\n    var opt = {};\n    var cb = null;\n\n    if (typeof options === 'object') {\n      opt = options;\n      cb = callback;\n    } else if (typeof options === 'function') {\n      cb = options;\n    }\n\n    // options extend postData, if any. Otherwise they extend parameters sent in the url\n    var type = requestData.type || 'GET';\n    if (type !== 'GET' && requestData.postData && !optionsAlwaysExtendParams) {\n      requestData.postData = _extend(requestData.postData, opt);\n    } else {\n      requestData.params = _extend(requestData.params, opt);\n    }\n    return _performRequest(requestData, cb);\n  };\n\n  /**\n   * Creates an instance of the wrapper\n   * @constructor\n   */\n  var Constr = function() {};\n\n  Constr.prototype = {\n    constructor: SpotifyWebApi\n  };\n\n  /**\n   * Fetches a resource through a generic GET request.\n   *\n   * @param {string} url The URL to be fetched\n   * @param {function(Object,Object)} callback An optional callback\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getGeneric = function(url, callback) {\n    var requestData = {\n      url: url\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Fetches information about the current user.\n   * See [Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMe = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches current user's saved tracks.\n   * See [Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedTracks = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds a list of tracks to the current user's saved tracks.\n   * See [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'PUT',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove a list of tracks from the current user's saved tracks.\n   * See [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'DELETE',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Checks if the current user's saved tracks contains a certain list of tracks.\n   * See [Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks/contains',\n      params: { ids: trackIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of the albums saved in the current Spotify user's \"Your Music\" library.\n   * See [Get Current User's Saved Albums](https://developer.spotify.com/web-api/get-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedAlbums = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Save one or more albums to the current user's \"Your Music\" library.\n   * See [Save Albums for Current User](https://developer.spotify.com/web-api/save-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'PUT',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove one or more albums from the current user's \"Your Music\" library.\n   * See [Remove Albums for Current User](https://developer.spotify.com/web-api/remove-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'DELETE',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Check if one or more albums is already saved in the current Spotify user's \"Your Music\" library.\n   * See [Check User's Saved Albums](https://developer.spotify.com/web-api/check-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums/contains',\n      params: { ids: albumIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the current user’s top artists based on calculated affinity.\n   * See [Get a User’s Top Artists](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopArtists = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the current user’s top tracks based on calculated affinity.\n   * See [Get a User’s Top Tracks](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopTracks = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get tracks from the current user’s recently played tracks.\n   * See [Get Current User’s Recently Played Tracks](https://developer.spotify.com/web-api/web-api-personalization-endpoints/get-recently-played/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyRecentlyPlayedTracks = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/recently-played'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds the current user as a follower of one or more other Spotify users.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followUsers = function(userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Adds the current user as a follower of one or more artists.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followArtists = function(artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Add the current user as a follower of one playlist.\n   * See [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed. For instance,\n   * whether you want the playlist to be followed privately ({public: false})\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followPlaylist = function(playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\n      type: 'PUT',\n      postData: {}\n    };\n\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Removes the current user as a follower of one or more other Spotify users.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowUsers = function(userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Removes the current user as a follower of one or more artists.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowArtists = function(artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Remove the current user as a follower of one playlist.\n   * See [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowPlaylist = function(playlistId, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\n      type: 'DELETE'\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Checks to see if the current user is following one or more other Spotify users.\n   * See [Check if Current User Follows Users or Artists](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the users sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingUsers = function(userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Checks to see if the current user is following one or more artists.\n   * See [Check if Current User Follows](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the artists sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingArtists = function(artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Check to see if one or more Spotify users are following a specified playlist.\n   * See [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the users are following the playlist sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.areFollowingPlaylist = function(playlistId, userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Get the current user's followed artists.\n   * See [Get User's Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} [options] Options, being after and limit.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an object with a paged object containing\n   * artists.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * artists objects. Not returned if a callback is given.\n   */\n  Constr.prototype.getFollowedArtists = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following',\n      type: 'GET',\n      params: {\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches information about a specific user.\n   * See [Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUser = function(userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId)\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of the current user's playlists.\n   * See [Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\n   * the permissions will be used.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUserPlaylists = function(userId, options, callback) {\n    var requestData;\n    if (typeof userId === 'string') {\n      requestData = {\n        url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists'\n      };\n    } else {\n      requestData = {\n        url: _baseUri + '/me/playlists'\n      };\n      callback = options;\n      options = userId;\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a specific playlist.\n   * See [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylist = function(playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the tracks from a specific playlist.\n   * See [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylistTracks = function(playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Creates a playlist and stores it in the current user's library.\n   * See [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.createPlaylist = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/playlists',\n      type: 'POST',\n      postData: options\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Change a playlist's name and public/private state\n   * See [Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} data A JSON object with the data to update. E.g. {name: 'A new name', public: true}\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.changePlaylistDetails = function(playlistId, data, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId,\n      type: 'PUT',\n      postData: data\n    };\n    return _checkParamsAndPerformRequest(requestData, data, callback);\n  };\n\n  /**\n   * Add tracks to a playlist.\n   * See [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addTracksToPlaylist = function(playlistId, uris, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'POST',\n      postData: {\n        uris: uris\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback, true);\n  };\n\n  /**\n   * Replace the tracks of a playlist\n   * See [Replace a Playlist's Tracks](https://developer.spotify.com/web-api/replace-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.replaceTracksInPlaylist = function(playlistId, uris, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: { uris: uris }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Reorder tracks in a playlist\n   * See [Reorder a Playlist’s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {number} rangeStart The position of the first track to be reordered.\n   * @param {number} insertBefore The position where the tracks should be inserted. To reorder the tracks to\n   * the end of the playlist, simply set insert_before to the position after the last track.\n   * @param {Object} options An object with optional parameters (range_length, snapshot_id)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.reorderTracksInPlaylist = function(playlistId, rangeStart, insertBefore, options, callback) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: {\n        range_start: rangeStart,\n        insert_before: insertBefore\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylist = function(playlistId, uris, callback) {\n    var dataToBeSent = uris.map(function(uri) {\n      if (typeof uri === 'string') {\n        return { uri: uri };\n      } else {\n        return uri;\n      }\n    });\n\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: { tracks: dataToBeSent }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist, specifying a snapshot id.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistWithSnapshotId = function(playlistId, uris, snapshotId, callback) {\n    var dataToBeSent = uris.map(function(uri) {\n      if (typeof uri === 'string') {\n        return { uri: uri };\n      } else {\n        return uri;\n      }\n    });\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        tracks: dataToBeSent,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist, specifying the positions of the tracks to be removed.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<number>} positions array of integers containing the positions of the tracks to remove\n   * from the playlist.\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistInPositions = function(playlistId, positions, snapshotId, callback) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        positions: positions,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Upload a custom playlist cover image.\n   * See [Upload A Custom Playlist Cover Image](https://developer.spotify.com/web-api/upload-a-custom-playlist-cover-image/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {string} imageData Base64 encoded JPEG image data, maximum payload size is 256 KB.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.uploadCustomPlaylistCoverImage = function(playlistId, imageData, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/images',\n      type: 'PUT',\n      postData: imageData.replace(/^data:image\\/jpeg;base64,/, ''),\n      contentType: 'image/jpeg'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Fetches an album from the Spotify catalog.\n   * See [Get an Album](https://developer.spotify.com/web-api/get-album/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbum = function(albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the tracks of an album from the Spotify catalog.\n   * See [Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbumTracks = function(albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple albums from the Spotify catalog.\n   * See [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/',\n      params: { ids: albumIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a track from the Spotify catalog.\n   * See [Get a Track](https://developer.spotify.com/web-api/get-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTrack = function(trackId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/tracks/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple tracks from the Spotify catalog.\n   * See [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/tracks/',\n      params: { ids: trackIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches an artist from the Spotify catalog.\n   * See [Get an Artist](https://developer.spotify.com/web-api/get-artist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtist = function(artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple artists from the Spotify catalog.\n   * See [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtists = function(artistIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/',\n      params: { ids: artistIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the albums of an artist from the Spotify catalog.\n   * See [Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistAlbums = function(artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of top tracks of an artist from the Spotify catalog, for a specific country.\n   * See [Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {string} countryId The id of the country (e.g. ES for Spain or US for United States)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistTopTracks = function(artistId, countryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/top-tracks',\n      params: { country: countryId }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of artists related with a given one from the Spotify catalog.\n   * See [Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistRelatedArtists = function(artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/related-artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of Spotify featured playlists (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getFeaturedPlaylists = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/featured-playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of new album releases featured in Spotify (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getNewReleases = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/new-releases'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a List of Categories](https://developer.spotify.com/web-api/get-list-categories/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategories = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a single category used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a Category](https://developer.spotify.com/web-api/get-category/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategory = function(categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of Spotify playlists tagged with a particular category.\n   * See [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategoryPlaylists = function(categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId + '/playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get Spotify catalog information about artists, albums, tracks or playlists that match a keyword string.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Array<string>} types An array of item types to search across.\n   * Valid types are: 'album', 'artist', 'playlist', and 'track'.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.search = function(query, types, options, callback) {\n    var requestData = {\n      url: _baseUri + '/search/',\n      params: {\n        q: query,\n        type: types.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches albums from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchAlbums = function(query, options, callback) {\n    return this.search(query, ['album'], options, callback);\n  };\n\n  /**\n   * Fetches artists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchArtists = function(query, options, callback) {\n    return this.search(query, ['artist'], options, callback);\n  };\n\n  /**\n   * Fetches tracks from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchTracks = function(query, options, callback) {\n    return this.search(query, ['track'], options, callback);\n  };\n\n  /**\n   * Fetches playlists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchPlaylists = function(query, options, callback) {\n    return this.search(query, ['playlist'], options, callback);\n  };\n\n  /**\n   * Get audio features for a single track identified by its unique Spotify ID.\n   * See [Get Audio Features for a Track](https://developer.spotify.com/web-api/get-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTrack = function(trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-features/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get audio features for multiple tracks based on their Spotify IDs.\n   * See [Get Audio Features for Several Tracks](https://developer.spotify.com/web-api/get-several-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTracks = function(trackIds, callback) {\n    var requestData = {\n      url: _baseUri + '/audio-features',\n      params: { ids: trackIds }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get audio analysis for a single track identified by its unique Spotify ID.\n   * See [Get Audio Analysis for a Track](https://developer.spotify.com/web-api/get-audio-analysis/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioAnalysisForTrack = function(trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-analysis/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\n   * See [Get Recommendations Based on Seeds](https://developer.spotify.com/web-api/get-recommendations/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getRecommendations = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Retrieve a list of available genres seed parameter values for recommendations.\n   * See [Available Genre Seeds](https://developer.spotify.com/web-api/get-recommendations/#available-genre-seeds) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAvailableGenreSeeds = function(callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations/available-genre-seeds'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get information about a user’s available devices.\n   * See [Get a User’s Available Devices](https://developer.spotify.com/web-api/get-a-users-available-devices/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyDevices = function(callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/devices'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get information about the user’s current playback state, including track, track progress, and active device.\n   * See [Get Information About The User’s Current Playback](https://developer.spotify.com/web-api/get-information-about-the-users-current-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlaybackState = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the object currently being played on the user’s Spotify account.\n   * See [Get the User’s Currently Playing Track](https://developer.spotify.com/web-api/get-the-users-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlayingTrack = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/currently-playing'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Transfer playback to a new device and determine if it should start playing.\n   * See [Transfer a User’s Playback](https://developer.spotify.com/web-api/transfer-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} deviceIds A JSON array containing the ID of the device on which playback should be started/transferred.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.transferMyPlayback = function(deviceIds, options, callback) {\n    var postData = options || {};\n    postData.device_ids = deviceIds;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player',\n      postData: postData\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Start a new context or resume current playback on the user’s active device.\n   * See [Start/Resume a User’s Playback](https://developer.spotify.com/web-api/start-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.play = function(options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var postData = {};\n    ['context_uri', 'uris', 'offset', 'position_ms'].forEach(function(field) {\n      if (field in options) {\n        postData[field] = options[field];\n      }\n    });\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/play',\n      params: params,\n      postData: postData\n    };\n\n    // need to clear options so it doesn't add all of them to the query params\n    var newOptions = typeof options === 'function' ? options : {};\n    return _checkParamsAndPerformRequest(requestData, newOptions, callback);\n  };\n\n  /**\n   * Pause playback on the user’s account.\n   * See [Pause a User’s Playback](https://developer.spotify.com/web-api/pause-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.pause = function(options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/pause',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Skips to next track in the user’s queue.\n   * See [Skip User’s Playback To Next Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToNext = function(options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/next',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Skips to previous track in the user’s queue.\n   * Note that this will ALWAYS skip to the previous track, regardless of the current track’s progress.\n   * Returning to the start of the current track should be performed using `.seek()`\n   * See [Skip User’s Playback To Previous Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToPrevious = function(options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/previous',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Seeks to the given position in the user’s currently playing track.\n   * See [Seek To Position In Currently Playing Track](https://developer.spotify.com/web-api/seek-to-position-in-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} position_ms The position in milliseconds to seek to. Must be a positive number.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.seek = function(position_ms, options, callback) {\n    var params = {\n      position_ms: position_ms\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/seek',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Set the repeat mode for the user’s playback. Options are repeat-track, repeat-context, and off.\n   * See [Set Repeat Mode On User’s Playback](https://developer.spotify.com/web-api/set-repeat-mode-on-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {String} state A string set to 'track', 'context' or 'off'.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setRepeat = function(state, options, callback) {\n    var params = {\n      state: state\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/repeat',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Set the volume for the user’s current playback device.\n   * See [Set Volume For User’s Playback](https://developer.spotify.com/web-api/set-volume-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} volume_percent The volume to set. Must be a value from 0 to 100 inclusive.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setVolume = function(volume_percent, options, callback) {\n    var params = {\n      volume_percent: volume_percent\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/volume',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Toggle shuffle on or off for user’s playback.\n   * See [Toggle Shuffle For User’s Playback](https://developer.spotify.com/web-api/toggle-shuffle-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {bool} state Whether or not to shuffle user's playback.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setShuffle = function(state, options, callback) {\n    var params = {\n      state: state\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/shuffle',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Gets the access token in use.\n   *\n   * @return {string} accessToken The access token\n   */\n  Constr.prototype.getAccessToken = function() {\n    return _accessToken;\n  };\n\n  /**\n   * Sets the access token to be used.\n   * See [the Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/) on\n   * the Spotify Developer site for more information about obtaining an access token.\n   *\n   * @param {string} accessToken The access token\n   * @return {void}\n   */\n  Constr.prototype.setAccessToken = function(accessToken) {\n    _accessToken = accessToken;\n  };\n\n  /**\n   * Sets an implementation of Promises/A+ to be used. E.g. Q, when.\n   * See [Conformant Implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md)\n   * for a list of some available options\n   *\n   * @param {Object} PromiseImplementation A Promises/A+ valid implementation\n   * @throws {Error} If the implementation being set doesn't conform with Promises/A+\n   * @return {void}\n   */\n  Constr.prototype.setPromiseImplementation = function(PromiseImplementation) {\n    var valid = false;\n    try {\n      var p = new PromiseImplementation(function(resolve) {\n        resolve();\n      });\n      if (typeof p.then === 'function' && typeof p.catch === 'function') {\n        valid = true;\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    if (valid) {\n      _promiseImplementation = PromiseImplementation;\n    } else {\n      throw new Error('Unsupported implementation of Promises/A+');\n    }\n  };\n\n  return Constr;\n})();\n\nif (typeof module === 'object' && typeof module.exports === 'object') {\n  module.exports = SpotifyWebApi;\n}\n\n\n//# sourceURL=webpack:///./node_modules/spotify-web-api-js/src/spotify-web-api.js?");

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Main.vue?vue&type=template&id=54d3a52e&":
/*!**********************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/components/Main.vue?vue&type=template&id=54d3a52e& ***!
  \**********************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"text-center\" },\n    [\n      _vm.connected\n        ? _c(\"span\", [_vm._v(\"connected\")])\n        : _c(\"q-btn\", {\n            attrs: { label: \"connect\", color: \"primary\" },\n            on: { click: _vm.connect }\n          })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n\n//# sourceURL=webpack:///./src/components/Main.vue?./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/SpotifyWidget.vue?vue&type=template&id=f7a682c4&":
/*!*******************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/components/SpotifyWidget.vue?vue&type=template&id=f7a682c4& ***!
  \*******************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"w-layout\",\n    { attrs: { noFooter: \"\", title: _vm.resource.basename() } },\n    [\n      _c(\"div\", { staticClass: \"fit column justify-center items-stretch\" }, [\n        _c(\"div\", { staticClass: \"col-auto overflow-hidden q-ma-md\" }, [\n          _c(\"div\", { staticClass: \"row gutter-sm items-center\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"col\" },\n              [\n                _c(\"q-select\", {\n                  attrs: {\n                    options: _vm.playlistOptions,\n                    placeholder: \"playlist\"\n                  },\n                  model: {\n                    value: _vm.selectedPlaylistId,\n                    callback: function($$v) {\n                      _vm.selectedPlaylistId = $$v\n                    },\n                    expression: \"selectedPlaylistId\"\n                  }\n                })\n              ],\n              1\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"div\",\n              { staticClass: \"col\" },\n              [\n                _c(\"q-select\", {\n                  attrs: { options: _vm.deviceOptions, placeholder: \"device\" },\n                  model: {\n                    value: _vm.selectedDeviceId,\n                    callback: function($$v) {\n                      _vm.selectedDeviceId = $$v\n                    },\n                    expression: \"selectedDeviceId\"\n                  }\n                })\n              ],\n              1\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"div\",\n              { staticClass: \"col-auto\" },\n              [\n                _c(\"q-btn\", {\n                  attrs: { color: \"primary\", label: \"play\" },\n                  on: { click: _vm.playSelected }\n                })\n              ],\n              1\n            )\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-auto text-center q-ma-md\" }, [\n          _vm.currentItem.name\n            ? _c(\"div\", { staticClass: \"text-faded ellipsis\" }, [\n                _vm._v(\n                  \"\\n        \" + _vm._s(_vm.currentItem.name) + \"\\n        \"\n                ),\n                _vm.currentItem.album\n                  ? _c(\"span\", [\n                      _vm._v(\" - \" + _vm._s(_vm.currentItem.album.name))\n                    ])\n                  : _vm._e()\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.currentDevice.name\n            ? _c(\"small\", { staticClass: \"text-faded\" }, [\n                _vm._v(_vm._s(_vm.currentDevice.name))\n              ])\n            : _vm._e()\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-auto q-ma-md\" }, [\n          _c(\"div\", { staticClass: \"row gutter-sm items-center\" }, [\n            _c(\"div\", { staticClass: \"col text-right\" }, [\n              _vm.time\n                ? _c(\"span\", { staticClass: \"text-faded\" }, [\n                    _vm._v(_vm._s(_vm.time))\n                  ])\n                : _vm._e()\n            ]),\n            _vm._v(\" \"),\n            _c(\n              \"div\",\n              { staticClass: \"col-auto\" },\n              [\n                _c(\"q-btn\", {\n                  attrs: { icon: \"mdi-skip-previous\", round: \"\" },\n                  on: { click: _vm.prev }\n                }),\n                _vm._v(\" \"),\n                _c(\"q-btn\", {\n                  attrs: {\n                    icon: _vm.state.is_playing ? \"mdi-pause\" : \"mdi-play\",\n                    color: \"primary\",\n                    round: \"\",\n                    size: \"xl\"\n                  },\n                  on: { click: _vm.playpause }\n                }),\n                _vm._v(\" \"),\n                _c(\"q-btn\", {\n                  attrs: { icon: \"mdi-skip-next\", round: \"\" },\n                  on: { click: _vm.next }\n                })\n              ],\n              1\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"div\",\n              { staticClass: \"col\" },\n              [\n                _c(\"q-btn\", {\n                  attrs: {\n                    icon: \"mdi-shuffle-variant\",\n                    color: _vm.state.shuffle_state ? \"primary\" : \"\",\n                    round: \"\",\n                    size: \"sm\"\n                  },\n                  on: {\n                    click: function($event) {\n                      _vm.setShuffle(!_vm.state.shuffle_state)\n                    }\n                  }\n                }),\n                _vm._v(\" \"),\n                _c(\"q-btn\", {\n                  attrs: {\n                    icon: \"mdi-repeat\",\n                    color: _vm.state.repeat_state == \"off\" ? \"\" : \"primary\",\n                    round: \"\",\n                    size: \"sm\"\n                  },\n                  on: {\n                    click: function($event) {\n                      _vm.setRepeat(\n                        _vm.state.repeat_state == \"off\" ? \"context\" : \"off\"\n                      )\n                    }\n                  }\n                }),\n                _vm._v(\" \"),\n                _c(\"q-btn\", {\n                  attrs: { icon: \"mdi-volume-low\", round: \"\", size: \"sm\" },\n                  on: {\n                    click: function($event) {\n                      _vm.setVolume(\"down\")\n                    }\n                  }\n                }),\n                _vm._v(\" \"),\n                _c(\"q-btn\", {\n                  attrs: { icon: \"mdi-volume-high\", round: \"\", size: \"sm\" },\n                  on: {\n                    click: function($event) {\n                      _vm.setVolume(\"up\")\n                    }\n                  }\n                })\n              ],\n              1\n            )\n          ])\n        ])\n      ])\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n\n//# sourceURL=webpack:///./src/components/SpotifyWidget.vue?./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n//# sourceURL=webpack:///./node_modules/vue-loader/lib/runtime/componentNormalizer.js?");

/***/ }),

/***/ "./src/components/Main.vue":
/*!*********************************!*\
  !*** ./src/components/Main.vue ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Main_vue_vue_type_template_id_54d3a52e___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Main.vue?vue&type=template&id=54d3a52e& */ \"./src/components/Main.vue?vue&type=template&id=54d3a52e&\");\n/* harmony import */ var _Main_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Main.vue?vue&type=script&lang=js& */ \"./src/components/Main.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _Main_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _Main_vue_vue_type_template_id_54d3a52e___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _Main_vue_vue_type_template_id_54d3a52e___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"src/components/Main.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);\n\n//# sourceURL=webpack:///./src/components/Main.vue?");

/***/ }),

/***/ "./src/components/Main.vue?vue&type=script&lang=js&":
/*!**********************************************************!*\
  !*** ./src/components/Main.vue?vue&type=script&lang=js& ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Main_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1!../../node_modules/vue-loader/lib??vue-loader-options!./Main.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Main.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_Main_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./src/components/Main.vue?");

/***/ }),

/***/ "./src/components/Main.vue?vue&type=template&id=54d3a52e&":
/*!****************************************************************!*\
  !*** ./src/components/Main.vue?vue&type=template&id=54d3a52e& ***!
  \****************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Main_vue_vue_type_template_id_54d3a52e___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./Main.vue?vue&type=template&id=54d3a52e& */ \"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/Main.vue?vue&type=template&id=54d3a52e&\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Main_vue_vue_type_template_id_54d3a52e___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Main_vue_vue_type_template_id_54d3a52e___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n\n\n//# sourceURL=webpack:///./src/components/Main.vue?");

/***/ }),

/***/ "./src/components/SpotifyWidget.vue":
/*!******************************************!*\
  !*** ./src/components/SpotifyWidget.vue ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _SpotifyWidget_vue_vue_type_template_id_f7a682c4___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SpotifyWidget.vue?vue&type=template&id=f7a682c4& */ \"./src/components/SpotifyWidget.vue?vue&type=template&id=f7a682c4&\");\n/* harmony import */ var _SpotifyWidget_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SpotifyWidget.vue?vue&type=script&lang=js& */ \"./src/components/SpotifyWidget.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _SpotifyWidget_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _SpotifyWidget_vue_vue_type_template_id_f7a682c4___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _SpotifyWidget_vue_vue_type_template_id_f7a682c4___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"src/components/SpotifyWidget.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);\n\n//# sourceURL=webpack:///./src/components/SpotifyWidget.vue?");

/***/ }),

/***/ "./src/components/SpotifyWidget.vue?vue&type=script&lang=js&":
/*!*******************************************************************!*\
  !*** ./src/components/SpotifyWidget.vue?vue&type=script&lang=js& ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_SpotifyWidget_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1!../../node_modules/vue-loader/lib??vue-loader-options!./SpotifyWidget.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/SpotifyWidget.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_1_node_modules_vue_loader_lib_index_js_vue_loader_options_SpotifyWidget_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./src/components/SpotifyWidget.vue?");

/***/ }),

/***/ "./src/components/SpotifyWidget.vue?vue&type=template&id=f7a682c4&":
/*!*************************************************************************!*\
  !*** ./src/components/SpotifyWidget.vue?vue&type=template&id=f7a682c4& ***!
  \*************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_SpotifyWidget_vue_vue_type_template_id_f7a682c4___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./SpotifyWidget.vue?vue&type=template&id=f7a682c4& */ \"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/SpotifyWidget.vue?vue&type=template&id=f7a682c4&\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_SpotifyWidget_vue_vue_type_template_id_f7a682c4___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_SpotifyWidget_vue_vue_type_template_id_f7a682c4___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n\n\n//# sourceURL=webpack:///./src/components/SpotifyWidget.vue?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _components_Main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/Main */ \"./src/components/Main.vue\");\n/* harmony import */ var _components_SpotifyWidget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/SpotifyWidget */ \"./src/components/SpotifyWidget.vue\");\n/* harmony import */ var ething_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ething-ui */ \"ething-ui\");\n/* harmony import */ var ething_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(ething_ui__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nething_ui__WEBPACK_IMPORTED_MODULE_2___default.a.extend('resources/SpotifyAccount', {\n  icon: 'mdi-spotify',\n  widgets: {\n    'spotify': {\n      in: ['devicePage', 'dashboard'],\n      component: _components_SpotifyWidget__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n      schema: {\n        title: 'Spotify widget',\n        description: 'play music on your device'\n      },\n      minHeight: 250,\n      minWidth: 500\n    },\n    'main': {\n      in: 'devicePage',\n      component: _components_Main__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n    }\n  }\n});\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "ething-ui":
/*!***************************!*\
  !*** external "EThingUI" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_ething_ui__;\n\n//# sourceURL=webpack:///external_%22EThingUI%22?");

/***/ })

/******/ });
});