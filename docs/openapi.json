{
  "info": {
    "title": "EThing HTTP API",
    "version": "unknown",
    "description": " \nThe eThing project is an 'Internet of Things' application. Store and retrieve data from devices using HTTP requests.\n\nAccess to your resources (files, tables, devices ...) through HTTP requests.\n\n-------------\n\n\n### Resource description\n\nThere are different types of resources. A resource can either be :\n\n - file : use this kind of objects to store text data or binary data (image, ...)\n - table : tables are used to store a collection of related data. Table consists of fields and rows.\n - device : this resource describes a device.\n - flow : this resource describes a flow.\n\n\n\n### Error messages\n\nWhen the API returns error messages, it does so in JSON format. For example, an error might look like this:\n\n```json\n{\n  \"message\": \"The resource does not exist\",\n  \"code\" : 404\n}\n```\n\nThe code value correspond to the HTTP status code of the response.\n\nIf the server was launched in debug mode, more information is provided.\n\n\n### Authorization\n\nThere are several options for authenticating with the API.\n\n\n#### Basic authentication\n\nHTTP Basic authentication is the simplest way of interacting with the API. \nSimply pass the username (default to 'ething') and password with each request through the `Authorization` header.\nThis value should be encoded (using base64 encoding) as per the HTTP Basic specification.\n\n```bash\ncurl -u username:password ...\n```\n\n\n#### API key\n\nAPI keys can be generated through the [web interface](http://localhost:8000/#/settings).\n\nSend the following header below on every request :\n\n```\nGET /ething/api/resources HTTP/1.1\nHost: localhost:8000\nX-API-KEY: <YOUR_API_KEY>\n```\n\nHere is a cURL example of how to send this header :\n\n```bash\ncurl -H 'X-API-KEY: <YOUR_API_KEY>' ...\n```\n\nYou can also simply pass the key as a URL query parameter when making Web service requests. For example:\n\n```bash\ncurl http://localhost:8000/api/resources?api_key=<YOUR_API_KEY>\n```\n\n\n### Partial response\n\nBy default, the server sends back the full representation of a resource after processing requests.\nFor better performance, you can ask the server to send only the fields you really need and get a partial response instead.\n\nTo request a partial response, use the fields request parameter to specify the fields you want returned.\nYou can use this parameter with any request that returns response data.\n\nexample:\n\nThis request will return the meta-data representation containing only the specified keys of a resource\n\n`/resources/56731_a?fields=id,name`\n\n\n### Filter resource or table data\n\nYou can search or filter resources or table's rows using a search query based on [ObjectPath query language](http://objectpath.org).\n\n\nExamples:\n\nSearch for resources with the name \"foobar\"\n\n`$.name is 'foobar'`\n\nSearch for plain text files\n\n`$.mime is 'text/plain'`\n\nSearch for tables resources only\n\n`$.type is 'resources/Table'`\n\nSearch for non empty files or tables\n\n`$.size > 0 or $.length > 0`\n\nSearch for resources modified after Mars 4th 2018\n\n`$.modifiedDate > '2018-03-04T00:00:00+01:00'`\n\n\n\n\n\n### Scopes\n\nScopes let you specify exactly what type of data access an API key needs.\n\n| Scope          | Description                                                          |\n|----------------|----------------------------------------------------------------------|\n|   resource:read|                                      read the content of any resource|\n|  resource:write|        create resources of any kind or update the resource's metadata|\n|       file:read|                                          read the content of any file|\n|      file:write|                                        modify the content of any file|\n|      table:read|                                         read the content of any table|\n|     table:write|                                       modify the content of any table|\n|  device:execute|                                              execute a device command|\n|   settings:read|                                                     read the settings|\n|  settings:write|                                                   modify the settings|\n|     flow:inject|                                                inject data into flows|\n"
  },
  "paths": {
    "/api/resources": {
      "get": {
        "tags": [
          "resource"
        ],
        "description": "Lists the resources.\n\n#### cURL example\n\n```bash\ncurl -H 'X-API-KEY: <YOUR_API_KEY>' http://localhost:8000/api/resources\n```",
        "responses": {
          "200": {
            "description": "A list of resources",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Resource"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "required": false,
            "type": "string",
            "default": null,
            "x-nullable": true,
            "description": "Query string for searching resources"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Limits the number of resources returned"
          },
          {
            "in": "query",
            "name": "skip",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Skips a number of resources"
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string",
            "description": "The key on which to do the sorting, by default the sort is made by modifiedDate descending. To make the sort descending, prepend the field name by minus \"-\". For instance, \"-createdDate\" will sort by createdDate descending"
          }
        ]
      },
      "post": {
        "tags": [
          "resource"
        ],
        "description": "Creates a new resource.",
        "parameters": [
          {
            "name": "metadata",
            "in": "body",
            "description": "\nThe metadata of the resource to be created.\n\nexample:\n\n```json\n{\n   \"type\": \"resources/SSH\",\n   \"name\": \"mydevice\",\n   \"location\": \"room 1\",\n   \"host\": \"192.168.1.25\"\n}\n```\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The resource was successfully created",
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of the device to create (eg: \"MySensorsEthernetGateway\")."
                    }
                  }
                },
                {
                  "$ref": "#/definitions/Device"
                }
              ]
            }
          }
        }
      }
    },
    "/api/settings": {
      "get": {
        "tags": [
          "settings"
        ],
        "description": "Returns the settings",
        "responses": {
          "200": {
            "description": "The settings",
            "schema": {
              "type": "object"
            }
          }
        },
        "parameters": []
      },
      "patch": {
        "tags": [
          "settings"
        ],
        "description": "update your settings.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "the attributes to modify",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "settings successfully updated",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/auth": {},
    "/api/devices/{id}/call/{operationId}": {
      "get": {
        "tags": [
          "device"
        ],
        "description": "Execute an operation identified by operationId. The parameters must be passed in the query string.",
        "responses": {
          "200": {
            "description": "The response of the device."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "An id representing a Resource",
            "type": "string"
          },
          {
            "in": "path",
            "name": "operationId",
            "required": true,
            "description": "id of the operation",
            "type": "string"
          }
        ]
      },
      "post": {
        "tags": [
          "device"
        ],
        "description": "Execute an operation identified by operationId. The parameters can either be passed in the query string or in the body as a JSON object or a x-www-form-urlencoded string.",
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "description": "id of the operation.",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "description": "required parameters for this operation.",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "An id representing a Resource",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The response of the device."
          }
        }
      }
    },
    "/api/tables/{id}/statistics": {
      "get": {
        "tags": [
          "table"
        ],
        "description": "Compute statistics of a column (=key)",
        "responses": {
          "200": {
            "description": "The records was successfully updated",
            "schema": {
              "type": "object",
              "description": "The statistics object."
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "An id representing a Resource",
            "type": "string"
          },
          {
            "in": "query",
            "name": "q",
            "required": false,
            "type": "string",
            "default": null,
            "x-nullable": true,
            "description": "A query string to select the rows used for the statistics computation"
          },
          {
            "in": "query",
            "name": "key",
            "required": true,
            "type": "string",
            "description": "the name of the key. Statistics can only be computed for a single key."
          }
        ]
      }
    },
    "/api/tables/{id}/replace": {
      "post": {
        "tags": [
          "table"
        ],
        "description": "Update records in a table",
        "responses": {
          "200": {
            "description": "The records was successfully updated",
            "schema": {
              "$ref": "#/definitions/Table"
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "An id representing a Resource",
            "type": "string"
          },
          {
            "in": "query",
            "name": "q",
            "required": true,
            "type": "string",
            "description": "A query that select the rows to update"
          },
          {
            "in": "query",
            "name": "invalid_field",
            "required": false,
            "type": "string",
            "default": "rename",
            "enum": [
              "rename",
              "stop",
              "skip",
              "none"
            ],
            "description": "The behaviour to adopt when an invalid field name appears."
          },
          {
            "in": "query",
            "name": "upsert",
            "required": false,
            "type": "boolean",
            "default": false,
            "description": "If true and no records was found, the data will be added to the table as a new record."
          }
        ]
      }
    },
    "/api/tables/{id}/remove": {
      "post": {
        "tags": [
          "table"
        ],
        "description": "Remove one or more records in a table",
        "responses": {
          "200": {
            "description": "The records was successfully deleted",
            "schema": {
              "$ref": "#/definitions/Table"
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "An id representing a Resource",
            "type": "string"
          },
          {
            "in": "query",
            "name": "ids",
            "required": false,
            "collectionFormat": "multi",
            "type": "string",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "The records id to be removed as a comma separated list."
          }
        ]
      }
    },
    "/api/resources/{id}": {
      "get": {
        "tags": [
          "resource"
        ],
        "description": "Returns the meta-data of a resource in JSON.",
        "responses": {
          "200": {
            "description": "resource object",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "An id representing a Resource",
            "type": "string"
          }
        ]
      },
      "delete": {
        "tags": [
          "resource"
        ],
        "description": "deletes a resource",
        "responses": {
          "200": {
            "description": "the resource has been deleted successfully"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "An id representing a Resource",
            "type": "string"
          },
          {
            "in": "query",
            "name": "children",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ]
      },
      "patch": {
        "tags": [
          "resource"
        ],
        "description": "update a resource. Only properties which are not readonly can be modified.\n\nRename a resource :\n\n```json\n{\n   \"name\":\"myFileRenamed.txt\"\n}\n```\n\nClear a description :\n\n```json\n{\n   \"description\":null\n}\n```",
        "parameters": [
          {
            "name": "modification",
            "in": "body",
            "description": "the attributes to modify",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "An id representing a Resource",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "resource successfully updated",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          }
        }
      }
    },
    "/api/tables/{id}": {
      "get": {
        "tags": [
          "table"
        ],
        "description": "Retrieves the content of a table.\n\n#### cURL examples\n\n```bash\n# get all the data of a table :\ncurl -H 'X-API-KEY: <YOUR_API_KEY>' http://localhost:8000/api/tables/<TABLE_ID>\n\n# only the first 20 rows :\ncurl -H 'X-API-KEY: <YOUR_API_KEY>' http://localhost:8000/api/tables/<TABLE_ID>?start=0&length=20\n\n# only the last 20 rows :\ncurl -H 'X-API-KEY: <YOUR_API_KEY>' http://localhost:8000/api/tables/<TABLE_ID>?start=-20\n\n# only the last 10 rows sorted by the field \"temperature\" in ascending order\n# (put a minus before the name of the field if you want to sort in descending order)\ncurl -H 'X-API-KEY: <YOUR_API_KEY>' http://localhost:8000/api/tables/<TABLE_ID>?start=-10&sort=temperature\n```",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "The records of this table",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "record's object. Every record has at least the 'id' and 'date' keys.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "an unique id to identify a record"
                  },
                  "date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the create date of this record"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "An id representing a Resource",
            "type": "string"
          },
          {
            "in": "query",
            "name": "start",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Position of the first rows to return. If start is negative, the position will start from the end. (default to 0)"
          },
          {
            "in": "query",
            "name": "length",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Maximum number of rows to return. If not set, returns until the end"
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string",
            "description": "the key on which to do the sorting, by default the sort is made by date ascending. To make the sort descending, prepend the field name by minus \"-\". For instance, \"-date\" will sort by date descending"
          },
          {
            "in": "query",
            "name": "q",
            "required": false,
            "type": "string",
            "description": "Query string for filtering results"
          },
          {
            "in": "query",
            "name": "datefmt",
            "required": false,
            "type": "string",
            "default": "rfc3339",
            "description": "the format of the date field (default to RFC3339) : timestamp,timestamp_ms,rfc3339"
          },
          {
            "in": "query",
            "name": "fmt",
            "required": false,
            "type": "string",
            "default": "json",
            "enum": [
              "json",
              "json_pretty",
              "csv",
              "csv_no_header"
            ],
            "description": "the output format (default to JSON) : json,json_pretty,csv,csv_no_header"
          }
        ]
      },
      "put": {
        "tags": [
          "table"
        ],
        "description": "Set the content of a table. The new data will erase the previous one.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "body",
            "description": "The content to be inserted as an array of object.\n\nThe data must be sent in a JSON formatted object :\n\n```json\n[{\n    \"<KEY>\":<VALUE>\n}]\n```\n\nexample:\n\n```json\n[\n    {\n      \"date\": \"2016-02-06T15:03:07+01:00\",\n      \"temperature\": 12.5,\n      \"pressure\": 101325\n    },\n    {\n      \"date\": \"2016-02-06T16:03:07+01:00\",\n      \"temperature\": 13.5,\n      \"pressure\": 101212\n    }\n]\n```\n\nIf the 'date' field is not present, the current date will be set automatically.\nIf an 'id' field is present, it will be automatically be resetted to a new value.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "An id representing a Resource",
            "type": "string"
          },
          {
            "in": "query",
            "name": "invalid_field",
            "required": false,
            "type": "string",
            "default": "rename",
            "enum": [
              "rename",
              "stop",
              "skip",
              "none"
            ],
            "description": "The behaviour to adopt when an invalid field name appears."
          },
          {
            "in": "query",
            "name": "skip_error",
            "required": false,
            "type": "boolean",
            "default": true,
            "description": "Whether to skip data on error or not."
          }
        ],
        "responses": {
          "200": {
            "description": "The content was successfully set. The table metadata is returned.",
            "schema": {
              "$ref": "#/definitions/Table"
            }
          }
        }
      },
      "post": {
        "tags": [
          "table"
        ],
        "description": "Insert a new record in a table",
        "parameters": [
          {
            "name": "record",
            "in": "body",
            "description": "The record to be inserted.\n\nThe data must be sent in a JSON formatted object :\n\n```json\n{\n    \"<KEY>\":<VALUE>\n}\n```\n\ncURL example :\n\n```bash\ncurl\n    -H 'X-API-KEY: <YOUR_API_KEY>'\n    -H \"Content-Type: application/json\"\n    -X POST\n    -d '{\"temperature\":15.2, \"comment\":\"outdoor\"}'\n    http://localhost:8000/api/tables/<TABLE_ID>\n```",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "An id representing a Resource",
            "type": "string"
          },
          {
            "in": "query",
            "name": "invalid_field",
            "required": false,
            "type": "string",
            "default": "rename",
            "enum": [
              "rename",
              "stop",
              "skip",
              "none"
            ],
            "description": "The behaviour to adopt when an invalid field name appears."
          }
        ],
        "responses": {
          "200": {
            "description": "The record was successfully inserted. The table metadata is returned.",
            "schema": {
              "$ref": "#/definitions/Table"
            }
          }
        }
      }
    },
    "/api/files/{id}": {
      "get": {
        "tags": [
          "file"
        ],
        "description": "Retrieves the content of a file.\n\n#### cURL example\n\nThe next command show you how to read the content of a file identified by its id.\n\n```bash\ncurl -H 'X-API-KEY: <YOUR_API_KEY>' http://localhost:8000/api/files/<FILE_ID>\n```",
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "The content of this file",
            "schema": {
              "type": "file"
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "An id representing a Resource",
            "type": "string"
          }
        ]
      },
      "put": {
        "tags": [
          "file"
        ],
        "description": "Upload the content of a file.\n\n#### cURL example\n\nThe next command show you how to send the content of the local file 'data.txt' into a file.\n\n```bash\ncurl\n    -H 'X-API-KEY: <YOUR_API_KEY>'\n    -X PUT\n    --data @data.txt\n    http://localhost:8000/api/files/<FILE_ID>\n```",
        "consumes": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "body",
            "description": "The new content. Could be of any type.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "An id representing a Resource",
            "type": "string"
          },
          {
            "in": "query",
            "name": "append",
            "required": false,
            "type": "boolean",
            "default": false,
            "description": "If true, the content will be appended."
          }
        ],
        "responses": {
          "200": {
            "description": "The file's metadata",
            "schema": {
              "$ref": "#/definitions/File"
            }
          }
        }
      }
    }
  },
  "tags": [],
  "swagger": "2.0",
  "definitions": {
    "interfaces": {},
    "resources": {
      "Resource": {
        "type": "class",
        "properties": {
          "extends": {
            "description": "An array of classes this resource is based on.",
            "$readOnly": true
          },
          "id": {
            "type": "string",
            "minLength": 1,
            "default": "C7ropPi",
            "description": "The id of the resource",
            "$readOnly": true
          },
          "type": {
            "type": "string",
            "minLength": 1,
            "default": "resources/Resource",
            "description": "The type of the resource",
            "$readOnly": true
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9 !#$%&'()+,\\-.;=@^_`{    ]+(\\/[a-zA-Z0-9 !#$%&'()+,\\-.;=@^_`{    ]+)*$",
            "description": "The name of the resource"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "default": "2019-03-01T14:45:18.562652+01:00",
            "description": "Create time for this resource",
            "$readOnly": true
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "default": "2019-03-01T14:45:18.791515+01:00",
            "description": "Last time this resource was modified",
            "$readOnly": true
          },
          "createdBy": {
            "anyOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "minLength": 1,
                "$component": "ething.resource"
              }
            ],
            "default": null,
            "description": "The id of the resource responsible of the creation of this resource, or null."
          },
          "data": {
            "type": "object",
            "additionalProperties": true,
            "properties": {},
            "default": {},
            "description": "A collection of arbitrary key-value pairs."
          },
          "description": {
            "type": "string",
            "default": "",
            "description": "A description of this resource."
          },
          "public": {
            "enum": [
              false,
              "readonly",
              "readwrite"
            ],
            "default": false,
            "description": "False: this resource is not publicly accessible. 'readonly': this resource is accessible for reading by anyone. 'readwrite': this resource is accessible for reading and writing by anyone."
          }
        },
        "additionalProperties": false,
        "title": "Resource",
        "signals": [
          "signals/resources/ResourceCreated",
          "signals/resources/ResourceDeleted",
          "signals/resources/ResourceUpdated"
        ],
        "required": [
          "name"
        ],
        "virtual": true
      },
      "Flow": {
        "allOf": [
          {
            "$ref": "#/resources/Resource"
          },
          {
            "type": "class",
            "properties": {
              "connections": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "src": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "minLength": 1
                      },
                      "minItems": 2,
                      "maxItems": 2
                    },
                    "dest": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "minLength": 1
                      },
                      "minItems": 2,
                      "maxItems": 2
                    }
                  },
                  "required": [
                    "src",
                    "dest"
                  ]
                },
                "default": [],
                "description": "A list of connections"
              },
              "nodes": {
                "type": "array",
                "items": {
                  "$ref": "#/nodes/Node"
                },
                "default": [],
                "description": "The list of nodes."
              }
            },
            "additionalProperties": false,
            "title": "Flow",
            "required": []
          }
        ]
      },
      "Device": {
        "allOf": [
          {
            "$ref": "#/resources/Resource"
          },
          {
            "type": "class",
            "properties": {
              "error": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ],
                "default": null,
                "description": "Any error concerning this device.",
                "$readOnly": true
              },
              "lastSeenDate": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "format": "date-time"
                  }
                ],
                "default": null,
                "description": "The last time this device was reached or made a request.",
                "$readOnly": true
              },
              "connected": {
                "type": "boolean",
                "default": true,
                "description": "Set to true when this device is connected."
              },
              "location": {
                "type": "string",
                "default": "",
                "description": "The location of this device."
              },
              "battery": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100
                  }
                ],
                "default": null,
                "description": "The battery level of this device (must be between 0 (empty) and 100 (full) , or null if the device has no battery information)."
              }
            },
            "additionalProperties": false,
            "title": "Device",
            "signals": [
              "signals/devices/BatteryLevelChanged",
              "signals/devices/DeviceConnected",
              "signals/devices/DeviceDisconnected"
            ],
            "required": []
          }
        ],
        "virtual": true
      },
      "File": {
        "allOf": [
          {
            "$ref": "#/resources/Resource"
          },
          {
            "type": "class",
            "properties": {
              "hasThumbnail": {
                "$readOnly": true
              },
              "contentModifiedDate": {
                "type": "string",
                "format": "date-time",
                "default": "2019-03-01T14:45:18.793517+01:00",
                "description": "Last time the content of this file was modified (formatted RFC 3339 timestamp).",
                "$readOnly": true
              },
              "mime": {
                "default": "text/plain",
                "description": "The MIME type of the file (automatically detected from the content or file extension).",
                "$readOnly": true
              },
              "size": {
                "default": 0,
                "description": "The size of this resource in bytes",
                "$readOnly": true
              }
            },
            "additionalProperties": false,
            "title": "File",
            "signals": [
              "signals/FileDataModified"
            ],
            "required": []
          }
        ]
      },
      "Table": {
        "allOf": [
          {
            "$ref": "#/resources/Resource"
          },
          {
            "type": "class",
            "properties": {
              "contentModifiedDate": {
                "type": "string",
                "format": "date-time",
                "default": "2019-03-01T14:45:18.793517+01:00",
                "description": "Last time the content of this table was modified.",
                "$readOnly": true
              },
              "keys": {
                "type": "object",
                "additionalProperties": true,
                "properties": {},
                "default": {},
                "description": "A key/value object where the keys correspond to the fields available in this table, and the corresponding value is the number of rows where the field is set. __The default keys ('id' and 'date' are not listed)__",
                "$readOnly": true
              },
              "length": {
                "default": 0,
                "description": "The number of records in the table",
                "$readOnly": true
              },
              "maxLength": {
                "anyOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer",
                    "minimum": 1
                  }
                ],
                "default": 5000,
                "description": "The maximum of records allowed in this table. When this number is reached, the oldest records will be removed to insert the new ones (first in, first out). Set it to null or 0 to disable this feature."
              }
            },
            "additionalProperties": false,
            "title": "Table",
            "signals": [
              "signals/TableDataAdded"
            ],
            "required": []
          }
        ]
      }
    },
    "Error": {
      "properties": {
        "message": {
          "type": "string",
          "description": "A description of the error",
          "$readOnly": true
        },
        "code": {
          "type": "integer",
          "description": "The HTTP response status code",
          "$readOnly": true
        }
      },
      "description": "An object describing an error",
      "type": "object"
    }
  },
  "parameters": {},
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "description": "authentication through an API key, used only by devices or apps.",
      "name": "X-API-KEY",
      "in": "header"
    },
    "api_key_query": {
      "type": "apiKey",
      "description": "authentication through an API key, used only by devices or apps.",
      "name": "api_key",
      "in": "query"
    },
    "basic_auth": {
      "type": "basic",
      "description": "basic authentication."
    }
  },
  "security": [
    {
      "api_key": []
    },
    {
      "api_key_query": []
    },
    {
      "basic_auth": []
    }
  ]
}